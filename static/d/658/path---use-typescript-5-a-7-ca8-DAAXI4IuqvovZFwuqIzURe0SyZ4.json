{"data":{"site":{"siteMetadata":{"title":"HI,DY","author":"liudingyuan"}},"markdownRemark":{"id":"601ef170-fed1-501b-accf-bfd440ba9777","excerpt":"9102年，该使用TypeScript了😊。 如何给项目脚手架增加TypeScript支持 对象：基于webpack的脚手架 我在三个地方，看到了 六 种配置方法。 TypeScript官方文档 使用 awesome-typescript-loder 解析ts文件 配置tsconfig.json 安装React…","html":"<p>9102年，该使用TypeScript了😊。</p>\n<h2>如何给项目脚手架增加TypeScript支持</h2>\n<p>对象：基于webpack的脚手架</p>\n<p>我在三个地方，看到了<strong>六</strong>种配置方法。</p>\n<h3><a href=\"http://www.typescriptlang.org/docs/handbook/react-&#x26;-webpack.html\">TypeScript官方文档</a></h3>\n<ol>\n<li>\n<p>使用<a href=\"https://github.com/s-panferov/awesome-typescript-loader\">awesome-typescript-loder</a>解析ts文件</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn add -D typescript awesome-typescript-loader</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.tsx?$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'awesome-typescript-loader'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>配置tsconfig.json</p>\n</li>\n<li>\n<p>安装React库对应的声明文件</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn add @types/react @types/react-dom</code></pre></div>\n</li>\n</ol>\n<p>现在可以使用TypeScript写React了。觉得构建速度有点慢？设置<code class=\"language-text\">useCache</code>启用缓存，再结合<a href=\"https://github.com/mzgoddard/hard-source-webpack-plugin\">hard-source-webpack-plugin</a>。</p>\n<h3><a href=\"https://webpack.js.org/guides/typescript\">webpack官方文档</a></h3>\n<ol>\n<li>\n<p>使用<a href=\"https://github.com/TypeStrong/ts-loader\">ts-loader</a>解析ts文件</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn add -D typescript ts-loader</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token punctuation\">{</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.tsx?$/</span><span class=\"token punctuation\">,</span>\n        loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'ts-loader'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>配置tsconfig.json</p>\n</li>\n<li>\n<p>安装React库对应的声明文件</p>\n</li>\n</ol>\n<p>好了，看上去和第一种方法的区别就是使用的loader不同。ts-loader还提供了其他使用方式：</p>\n<ul>\n<li>\n<p>配合<a href=\"https://github.com/amireh/happypack\">happypack</a>或者<a href=\"https://webpack.js.org/loaders/thread-loader/\">thread-loader</a>提高构建速度</p>\n</li>\n<li>\n<p>ts-loader设置<code class=\"language-text\">transpileOnly: true</code>，关掉类型检查，这样可以提高开发阶段的编译速度。当然，没有类型检查，干嘛还用TypeScript。所以使用<a href=\"https://github.com/Realytics/fork-ts-checker-webpack-plugin\">fork-ts-checker-webpack-plugin</a>进行类型检查，它会在另外一个进程运行，有更快的构建速度。</p>\n</li>\n<li>\n<p>和babel结合使用。ts-loader先处理ts文件，再交给babel-loder。</p>\n</li>\n</ul>\n<h3><a href=\"https://babeljs.io/docs/en/babel-preset-typescript\">babel文档</a></h3>\n<ol>\n<li>\n<p>使用<code class=\"language-text\">@babel/preset-typescript</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn add -D @babel/preset-typescript</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// babel.config.js</span>\n<span class=\"token punctuation\">{</span>\n  presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-typescript'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>配置tsconfig.json</p>\n</li>\n<li>\n<p>安装React库对应的声明文件</p>\n</li>\n</ol>\n<p>Wow,so easy.</p>\n<p>有那么多配置方案，用哪一个🤔</p>\n<h2>讨论讨论</h2>\n<p>通过对TypeScript和webpack文档提供的配置方案进行比较，两者主要不同点在于各自使用的loader。如果能比较使用哪一个更好，再和babel的方案比较，我就可以得出一个让我满意的方案。</p>\n<h3><code class=\"language-text\">awesome-typescript-loader</code> VS <code class=\"language-text\">ts-loader</code></h3>\n<p>awesome-typescript-loader(atl)是这样描述与ts-loader的不同的：alt与babel有较好的集成，可以利用babel的缓存有效的减少构建时间。alt也可以利用另一个进程进行类型检查，使得webpack能够更早的结束编译。但有人测试，在某些情况，alt没有ts-loader快。<a href=\"https://github.com/s-panferov/awesome-typescript-loader/issues/497\">issue#497</a></p>\n<p>ts-loader: webpack文档提供的用例，并且说了为什么</p>\n<blockquote>\n<p>We use ts-loader in this guide as it makes enabling additional webpack features, such as importing other web assets, a bit easier.</p>\n</blockquote>\n<p>ts-loader与webpack有很好的配合。可以结合<code class=\"language-text\">fork-ts-checker-webpack-plugin</code>使用，提高构建速度。可以和babel-loader结合使用。alt提供的性能优化ts-loader也能提供，还比alt快。</p>\n<p>这个回合的结果：我决定选择ts-loader。</p>\n<h3><code class=\"language-text\">ts-loader</code> VS <code class=\"language-text\">babel</code></h3>\n<p>babel的配置是最简单的，配置一下<code class=\"language-text\">presets</code>就好，其它的与前面方案一致。<code class=\"language-text\">@babel/preset-typescript</code>包含了一个插件<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-typescript\">@babel/plugin-transform-typescript</a>。</p>\n<p>该插件的说明：</p>\n<blockquote>\n<p>Does not type-check its input. For that, you will need to install and set up TypeScript.</p>\n</blockquote>\n<p>这个插件不会进行类型检查。那它做了什么？它在处理ts文件时，其实是直接移除掉了哪些类型声明。所以它的处理速度很快。缺点是不支持几个语法：</p>\n<ul>\n<li><code class=\"language-text\">namespace</code>。在单独的文件中export好了。</li>\n<li><code class=\"language-text\">const enums</code>。这个就麻烦了，没办法支持ts的这个语法。</li>\n<li><code class=\"language-text\">export =</code>和<code class=\"language-text\">import = require()</code>。这种写法还是不要用了。</li>\n</ul>\n<p>可以接受。但类型检查怎么办🤔。</p>\n<p>babel和TypeScript功能上有重叠了，它们都可以将高版本js语法编译成低版本语法，比如es6->es5。是否我们可以不用babel了？至少进行web应用开发时不行，因为要用polyfill，特别是babel@7带来的新特性（比如<code class=\"language-text\">useBuiltIns</code>）；如果用了ant-design，为了能够按需加载，需要使用<code class=\"language-text\">babel-import-plugin</code>。</p>\n<p>babel要用，那<code class=\"language-text\">ts-loader</code>加上<code class=\"language-text\">babel-loader</code>行不行，可以。那么为了提高性能，我们会关掉<code class=\"language-text\">ts-loader</code>的类型检查，加入<code class=\"language-text\">fork-ts-checker-webpack-plugin</code>。</p>\n<p>既然这样，就不要这么麻烦了。使用babel + fs-ts-checker-webpack-plugin，前者解析ts文件，后者进行类型检查。实际上，<code class=\"language-text\">create-react-app</code>就是这样做的。</p>\n<h2>我的配置</h2>\n<ol>\n<li>\n<p>babel设置</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn add -D @babel/preset-typescript</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// babel.config.js</span>\n<span class=\"token punctuation\">{</span>\n  presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-typescript'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token punctuation\">{</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(js|jsx|ts|tsx)$/</span><span class=\"token punctuation\">,</span>\n        exclude<span class=\"token punctuation\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n          options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            cacheDirectory<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>类型检查器设置</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn add -D typescript fork-ts-checker-webpack-plugin\nyarn add @types/react @types/react-dom</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.json</span>\n<span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 参数说明可以到插件git仓库查看</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ForkTsCheckerWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      compilerOptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      watch<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">async</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      reportFiles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src/**/*.{ts,tsx}'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      checkSyntacticErrors<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      silent<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json</a>配置</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"dom.iterable\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"esnext\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"allowJs\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"skipLibCheck\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"esModuleInterop\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"allowSyntheticDefaultImports\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"strict\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"forceConsistentCasingInFileNames\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"moduleResolution\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"resolveJsonModule\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"isolatedModules\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"noEmit\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"jsx\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"preserve\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"include\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>为了导入非ts文件，比如图片或者svg，还需要增加声明文件</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 在TypeScript能够解析到的目录添加一个*.d.ts文件</span>\n<span class=\"token comment\">// 比如types.d.ts，现在可以导入png资源了，其他类型资源类似</span>\ndeclare module <span class=\"token string\">'*.png'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> src<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> src<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>好了，TypeScript已支持。</p>\n<h2>总结</h2>\n<p>为了在webpack中使用TypeScript，我比较了多种配置方式，从alt到ts-loader，再到babel。最终选择了babel+一个类型检查器的方案。现在可以用TypeScript写React了，不过少了lint，下篇再说。</p>","frontmatter":{"title":"使用TypeScript开发React应用","date":"02-26-2019"}}},"pageContext":{"slug":"/use-typescript/","previous":{"fields":{"slug":"/RAIL-model/"},"frontmatter":{"title":"RAIL模型介绍"}},"next":null}}